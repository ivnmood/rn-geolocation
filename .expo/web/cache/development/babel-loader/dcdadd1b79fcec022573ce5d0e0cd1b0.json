{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nvar _jsxFileName = \"H:\\\\BSUIR\\\\Web\\\\React Native\\\\rn-self-posts\\\\src\\\\components\\\\GetWeather.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { THEME } from \"../theme\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCityWeather, getWeather } from \"../store/geolocationAction\";\nimport { AppCard } from \"./ui/AppCard\";\nexport var GetWeather = function GetWeather(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      buttonClicked = _useState4[0],\n      setButtonClicked = _useState4[1];\n\n  useEffect(function () {\n    dispatch(fetchCityWeather());\n  }, [buttonClicked]);\n  var weather = useSelector(function (state) {\n    return state.geo.cityWeather;\n  });\n\n  var getWeatherCity = function getWeatherCity() {\n    if (value.trim()) {\n      dispatch(getWeather(value));\n      setValue('');\n      Keyboard.dismiss();\n      setTimeout(function () {\n        return setButtonClicked(!buttonClicked);\n      }, 3000);\n    } else {\n      Alert.alert('Input can\\'t be empty');\n    }\n  };\n\n  var content;\n\n  if (weather.length === 0) {\n    content = React.createElement(Text, {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 19\n      }\n    }, \"Enter city\");\n  } else {\n    content = React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, \"City: \", weather[weather.length - 1].title), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \"Temperature: \", weather[weather.length - 1].temp), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, \"Feels like: \", weather[weather.length - 1].feelsLike), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, \"Description: \", weather[weather.length - 1].description));\n  }\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.block,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: setValue,\n    value: value,\n    maxLength: 64,\n    placeholder: \"Enter your city\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Get weather\",\n    onPress: getWeatherCity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  })), React.createElement(AppCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, content));\n};\nvar styles = StyleSheet.create({\n  block: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 15\n  },\n  input: {\n    width: '65%',\n    borderStyle: 'solid',\n    borderBottomWidth: 2,\n    borderBottomColor: THEME.MAIN_COLOR,\n    padding: 5\n  }\n});","map":{"version":3,"sources":["H:/BSUIR/Web/React Native/rn-self-posts/src/components/GetWeather.js"],"names":["React","useState","useEffect","THEME","useDispatch","useSelector","fetchCityWeather","getWeather","AppCard","GetWeather","value","setValue","dispatch","buttonClicked","setButtonClicked","weather","state","geo","cityWeather","getWeatherCity","trim","Keyboard","dismiss","setTimeout","Alert","alert","content","length","styles","text","title","temp","feelsLike","description","block","input","StyleSheet","create","flexDirection","justifyContent","alignItems","marginBottom","width","borderStyle","borderBottomWidth","borderBottomColor","MAIN_COLOR","padding"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {View, StyleSheet, TextInput, Button, Alert, Keyboard, Text} from 'react-native'\r\nimport {THEME} from \"../theme\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {fetchCityWeather, getWeather} from \"../store/geolocationAction\";\r\nimport {AppCard} from \"./ui/AppCard\";\r\n\r\nexport const GetWeather = ({}) => {\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useDispatch()\r\n    const [buttonClicked, setButtonClicked] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCityWeather())\r\n    }, [buttonClicked])\r\n\r\n    const weather = useSelector(state => state.geo.cityWeather)\r\n\r\n\r\n    const getWeatherCity = () => {\r\n        if (value.trim()) {\r\n            dispatch(getWeather(value))\r\n            setValue('')\r\n            Keyboard.dismiss()\r\n            setTimeout(() => setButtonClicked(!buttonClicked), 3000)\r\n        } else {\r\n            Alert.alert('Input can\\'t be empty')\r\n        }\r\n    }\r\n\r\n\r\n    let content\r\n    if (weather.length === 0) {\r\n        content = <Text style={styles.text}>Enter city</Text>\r\n    } else {\r\n        content = <View>\r\n            <Text>City: {weather[weather.length -1].title}</Text>\r\n            <Text>Temperature: {weather[weather.length -1].temp}</Text>\r\n            <Text>Feels like: {weather[weather.length -1].feelsLike}</Text>\r\n            <Text>Description: {weather[weather.length -1].description}</Text>\r\n        </View>\r\n\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <View style={styles.block}>\r\n                <TextInput style={styles.input}\r\n                           onChangeText={setValue}\r\n                           value={value}\r\n                           maxLength={64}\r\n                           placeholder='Enter your city'/>\r\n                <Button title='Get weather' onPress={getWeatherCity}/>\r\n\r\n\r\n            </View>\r\n            <AppCard>\r\n                {content}\r\n            </AppCard>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    block: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: 15,\r\n    },\r\n    input: {\r\n        width: '65%',\r\n        borderStyle: 'solid',\r\n        borderBottomWidth: 2,\r\n        borderBottomColor: THEME.MAIN_COLOR,\r\n        padding: 5,\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}