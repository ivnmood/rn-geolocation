{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_GEOLOCATION, FETCH_CITY_WEATHER, FETCH_GEOLOCATION, GET_WEATHER } from \"../types\";\nimport { Http } from \"../http\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Location from 'expo-location';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDHrtLz-WzJtpfYaYkume2SouRxdpOqy-8\");\n\nvar showLoader = function showLoader() {\n  return function (dispatch) {\n    return dispatch({\n      type: SHOW_LOADER\n    });\n  };\n};\n\nvar hideLoader = function hideLoader() {\n  return function (dispatch) {\n    return dispatch({\n      type: HIDE_LOADER\n    });\n  };\n};\n\nvar showError = function showError(error) {\n  return function (dispatch) {\n    return dispatch({\n      type: SHOW_ERROR,\n      error: error\n    });\n  };\n};\n\nvar clearError = function clearError() {\n  return function (dispatch) {\n    return dispatch({\n      type: CLEAR_ERROR\n    });\n  };\n};\n\nexport var fetchGeolocation = function fetchGeolocation() {\n  showLoader();\n  clearError();\n  return function _callee(dispatch) {\n    var data, geolocation;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Http.get('https://rn-geolocation-1341c.firebaseio.com/geolocation.json'));\n\n          case 3:\n            data = _context.sent;\n            geolocation = Object.keys(data).map(function (key) {\n              return _objectSpread(_objectSpread({}, data[key]), {}, {\n                id: key\n              });\n            });\n            dispatch({\n              type: FETCH_GEOLOCATION,\n              geolocation: geolocation\n            });\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            showError('Something went wrong...');\n            console.log(_context.t0);\n\n          case 12:\n            _context.prev = 12;\n            hideLoader();\n            return _context.finish(12);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8, 12, 15]], Promise);\n  };\n};\nexport var fetchCityWeather = function fetchCityWeather() {\n  showLoader();\n  clearError();\n  return function _callee2(dispatch) {\n    var data, cityWeather;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Http.get('https://rn-geolocation-1341c.firebaseio.com/cityWeather.json'));\n\n          case 3:\n            data = _context2.sent;\n            cityWeather = Object.keys(data).map(function (key) {\n              return _objectSpread(_objectSpread({}, data[key]), {}, {\n                id: key\n              });\n            });\n            dispatch({\n              type: FETCH_CITY_WEATHER,\n              cityWeather: cityWeather\n            });\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            showError('Something went wrong...');\n            console.log(_context2.t0);\n\n          case 12:\n            _context2.prev = 12;\n            hideLoader();\n            return _context2.finish(12);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8, 12, 15]], Promise);\n  };\n};\nexport var addGeolocation = function addGeolocation() {\n  var options = {\n    era: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long',\n    timezone: 'UTC',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric'\n  };\n  return function _callee4(dispatch) {\n    var location;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 2:\n            location = _context4.sent;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(Geocode.fromLatLng(location.coords.latitude, location.coords.longitude).then(function _callee3(response) {\n              var address, api_url, dataWeather, temp, feelsLike, description, lat, lng, date, data;\n              return _regeneratorRuntime.async(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      address = response.results[0].formatted_address;\n                      _context3.next = 3;\n                      return _regeneratorRuntime.awrap(fetch(\"https://openweathermap.org/data/2.5/weather?lat=\" + location.coords.latitude + \"&lon=\" + location.coords.longitude + \"&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric\"));\n\n                    case 3:\n                      api_url = _context3.sent;\n                      _context3.next = 6;\n                      return _regeneratorRuntime.awrap(api_url.json());\n\n                    case 6:\n                      dataWeather = _context3.sent;\n                      temp = dataWeather.main.temp;\n                      feelsLike = dataWeather.main.feels_like;\n                      description = dataWeather.weather[0].description;\n                      lat = location.coords.latitude;\n                      lng = location.coords.longitude;\n                      date = new Date().toLocaleString(\"en\", options);\n                      _context3.next = 15;\n                      return _regeneratorRuntime.awrap(Http.post('https://rn-geolocation-1341c.firebaseio.com/geolocation.json', {\n                        temp: temp,\n                        feelsLike: feelsLike,\n                        description: description,\n                        lat: lat,\n                        lng: lng,\n                        address: address,\n                        date: date\n                      }));\n\n                    case 15:\n                      data = _context3.sent;\n                      dispatch({\n                        type: ADD_GEOLOCATION,\n                        date: date,\n                        id: data.name,\n                        temp: temp,\n                        feelsLike: feelsLike,\n                        description: description,\n                        lat: lat,\n                        lng: lng,\n                        address: address\n                      }, function (error) {\n                        console.error(error);\n                        Alert.alert('Error', \"\" + error);\n                      });\n\n                    case 17:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getWeather = function getWeather(title) {\n  return function _callee6(dispatch) {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(Geocode.fromAddress(title).then(function _callee5(response) {\n              var _await$response$resul, lat, lng, api_url, dataWeather, temp, feelsLike, description, data;\n\n              return _regeneratorRuntime.async(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.next = 2;\n                      return _regeneratorRuntime.awrap(response.results[0].geometry.location);\n\n                    case 2:\n                      _await$response$resul = _context5.sent;\n                      lat = _await$response$resul.lat;\n                      lng = _await$response$resul.lng;\n                      _context5.next = 7;\n                      return _regeneratorRuntime.awrap(fetch(\"https://openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lng + \"&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric\"));\n\n                    case 7:\n                      api_url = _context5.sent;\n                      _context5.next = 10;\n                      return _regeneratorRuntime.awrap(api_url.json());\n\n                    case 10:\n                      dataWeather = _context5.sent;\n                      temp = dataWeather.main.temp;\n                      feelsLike = dataWeather.main.feels_like;\n                      description = dataWeather.weather[0].description;\n                      _context5.next = 16;\n                      return _regeneratorRuntime.awrap(Http.post('https://rn-geolocation-1341c.firebaseio.com/cityWeather.json', {\n                        title: title,\n                        temp: temp,\n                        feelsLike: feelsLike,\n                        description: description,\n                        lat: lat,\n                        lng: lng\n                      }));\n\n                    case 16:\n                      data = _context5.sent;\n                      dispatch({\n                        type: GET_WEATHER,\n                        id: data.name,\n                        title: title,\n                        temp: dataWeather.main.temp,\n                        feelsLike: dataWeather.main.feels_like,\n                        description: dataWeather.weather[0].description,\n                        lat: lat,\n                        lng: lng\n                      });\n\n                    case 18:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }, function (error) {\n              console.error(error);\n              Alert.alert('Error', \"\" + error);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar removeTodo = function removeTodo(id) {\n  return function _callee7(dispatch) {\n    var todo;\n    return _regeneratorRuntime.async(function _callee7$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            todo = state.todos.find(function (t) {\n              return t.id === id;\n            });\n            Alert.alert(\"Delete Todo\", \"Do you want delete \\\"\" + todo.title + \"\\\"?\", [{\n              text: \"Cancel\",\n              style: \"cancel\"\n            }, {\n              text: \"Delete\",\n              onPress: function onPress() {\n                return _regeneratorRuntime.async(function onPress$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        changeScreen(null);\n                        _context7.next = 3;\n                        return _regeneratorRuntime.awrap(Http.delete(\"https://react-native-todo-app-nibl.firebaseio.com/todos/\" + id + \".json\"));\n\n                      case 3:\n                        dispatch({\n                          type: REMOVE_TODO,\n                          id: id\n                        });\n\n                      case 4:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }\n            }], {\n              cancelable: false\n            });\n\n          case 2:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["H:/BSUIR/Web/React Native/rn-self-posts/src/store/geolocationAction.js"],"names":["ADD_GEOLOCATION","FETCH_CITY_WEATHER","FETCH_GEOLOCATION","GET_WEATHER","Http","Location","Geocode","setApiKey","showLoader","dispatch","type","SHOW_LOADER","hideLoader","HIDE_LOADER","showError","error","SHOW_ERROR","clearError","CLEAR_ERROR","fetchGeolocation","get","data","geolocation","Object","keys","map","key","id","console","log","fetchCityWeather","cityWeather","addGeolocation","options","era","year","month","day","weekday","timezone","hour","minute","second","getCurrentPositionAsync","location","fromLatLng","coords","latitude","longitude","then","response","address","results","formatted_address","fetch","api_url","json","dataWeather","temp","main","feelsLike","feels_like","description","weather","lat","lng","date","Date","toLocaleString","post","name","Alert","alert","getWeather","title","fromAddress","geometry","removeTodo","todo","state","todos","find","t","text","style","onPress","changeScreen","delete","REMOVE_TODO","cancelable"],"mappings":"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","sourcesContent":["import {ADD_GEOLOCATION, FETCH_CITY_WEATHER, FETCH_GEOLOCATION, GET_WEATHER} from \"../types\";\r\nimport {Http} from \"../http\";\r\nimport {Alert} from \"react-native\";\r\nimport * as Location from 'expo-location';\r\nimport Geocode from \"react-geocode\";\r\n\r\n\r\nGeocode.setApiKey(\"AIzaSyDHrtLz-WzJtpfYaYkume2SouRxdpOqy-8\");\r\n\r\nconst showLoader = () => {\r\n    return dispatch => dispatch({type: SHOW_LOADER})\r\n}\r\nconst hideLoader = () => {\r\n    return dispatch => dispatch({type: HIDE_LOADER})\r\n}\r\nconst showError = (error) => {\r\n    return dispatch => dispatch({type: SHOW_ERROR, error})\r\n}\r\nconst clearError = () => {\r\n    return dispatch => dispatch({type: CLEAR_ERROR})\r\n}\r\n\r\n\r\nexport const fetchGeolocation = () => {\r\n    showLoader()\r\n    clearError()\r\n    return async dispatch => {\r\n        try {\r\n            const data = await Http.get('https://rn-geolocation-1341c.firebaseio.com/geolocation.json')\r\n            const geolocation = Object.keys(data).map(key => ({...data[key], id: key}))\r\n            dispatch({\r\n                type: FETCH_GEOLOCATION,\r\n                geolocation\r\n            })\r\n        } catch (e) {\r\n            showError('Something went wrong...')\r\n            console.log(e)\r\n        } finally {\r\n            hideLoader()\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCityWeather = () => {\r\n    showLoader()\r\n    clearError()\r\n    return async dispatch => {\r\n        try {\r\n            const data = await Http.get('https://rn-geolocation-1341c.firebaseio.com/cityWeather.json')\r\n            const cityWeather = Object.keys(data).map(key => ({...data[key], id: key}))\r\n            dispatch({\r\n                type: FETCH_CITY_WEATHER,\r\n                cityWeather\r\n            })\r\n        } catch (e) {\r\n            showError('Something went wrong...')\r\n            console.log(e)\r\n        } finally {\r\n            hideLoader()\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const addGeolocation = () => {\r\n    const options = {\r\n        era: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        weekday: 'long',\r\n        timezone: 'UTC',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        second: 'numeric'\r\n    };\r\n    return async dispatch => {\r\n        const location = await Location.getCurrentPositionAsync({});\r\n        await Geocode.fromLatLng(location.coords.latitude, location.coords.longitude).then(\r\n            async response => {\r\n                const address = response.results[0].formatted_address;\r\n                const api_url =\r\n                    await fetch(`https://openweathermap.org/data/2.5/weather?lat=${location.coords.latitude}&lon=${location.coords.longitude}&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric`);\r\n                const dataWeather = await api_url.json();\r\n                const temp = dataWeather.main.temp\r\n                const feelsLike = dataWeather.main.feels_like\r\n                const description = dataWeather.weather[0].description\r\n                const lat = location.coords.latitude\r\n                const lng = location.coords.longitude\r\n                const date = (new Date()).toLocaleString(\"en\", options)\r\n                const data = await Http.post('https://rn-geolocation-1341c.firebaseio.com/geolocation.json', {temp, feelsLike,\r\n                    description, lat, lng, address, date\r\n                })\r\n                dispatch({\r\n                        type: ADD_GEOLOCATION,\r\n                        date,\r\n                        id: data.name,\r\n                        temp,\r\n                        feelsLike,\r\n                        description,\r\n                        lat,\r\n                        lng,\r\n                        address\r\n                    }, error => {\r\n                        console.error(error)\r\n                        Alert.alert('Error', `${error}`)\r\n                    }\r\n                )\r\n            })\r\n    }\r\n}\r\n\r\nexport const getWeather = title => {\r\n    return async dispatch => {\r\n        await Geocode.fromAddress(title).then(\r\n            async response => {\r\n                const {lat, lng} = await response.results[0].geometry.location;\r\n                const api_url =\r\n                    await fetch(`https://openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric`);\r\n                const dataWeather = await api_url.json();\r\n                const temp = dataWeather.main.temp\r\n                const feelsLike = dataWeather.main.feels_like\r\n                const description = dataWeather.weather[0].description\r\n                const data = await Http.post('https://rn-geolocation-1341c.firebaseio.com/cityWeather.json', {\r\n                    title, temp, feelsLike,\r\n                    description, lat, lng\r\n                })\r\n                dispatch({\r\n                    type: GET_WEATHER,\r\n                    id: data.name,\r\n                    title,\r\n                    temp: dataWeather.main.temp,\r\n                    feelsLike: dataWeather.main.feels_like,\r\n                    description: dataWeather.weather[0].description,\r\n                    lat,\r\n                    lng\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n                Alert.alert('Error', `${error}`)\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nconst removeTodo = id => {\r\n    return async dispatch => {\r\n        const todo = state.todos.find(t => t.id === id)\r\n        Alert.alert(\r\n            \"Delete Todo\",\r\n            `Do you want delete \"${todo.title}\"?`,\r\n            [\r\n                {\r\n                    text: \"Cancel\",\r\n                    style: \"cancel\"\r\n                },\r\n                {\r\n                    text: \"Delete\", onPress: async () => {\r\n                        changeScreen(null)\r\n                        await Http.delete(`https://react-native-todo-app-nibl.firebaseio.com/todos/${id}.json`)\r\n                        dispatch({type: REMOVE_TODO, id})\r\n                    }\r\n                }\r\n            ],\r\n            {cancelable: false}\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}