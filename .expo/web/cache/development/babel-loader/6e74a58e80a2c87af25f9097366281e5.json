{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"H:\\\\BSUIR\\\\Web\\\\React Native\\\\rn-self-posts\\\\src\\\\screens\\\\HistoryScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGeolocation } from \"../store/geolocationAction\";\nimport { HistoryItem } from \"../components/HistoryItem\";\nimport { THEME } from \"../theme\";\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\nimport { AppHeaderIcon } from \"../components/AppHeadersIcon\";\nimport { AppLoader } from \"../components/ui/AppLoader\";\nexport var HistoryScreen = function HistoryScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var openHistoryItem = function openHistoryItem(geolocation) {\n    navigation.navigate('Item', {\n      geoId: geolocation.id,\n      geolocation: geolocation\n    });\n  };\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(fetchGeolocation());\n  }, []);\n  var allGeolocations = useSelector(function (state) {\n    return state.geo.geolocation;\n  });\n\n  var _useState = useState(Dimensions.get('window').width - THEME.PADDING_HORIZONTAL * 2),\n      _useState2 = _slicedToArray(_useState, 2),\n      deviceWidth = _useState2[0],\n      setDeviceWidth = _useState2[1];\n\n  useEffect(function () {\n    var update = function update() {\n      var width = Dimensions.get('window').width - THEME.PADDING_HORIZONTAL * 2;\n      setDeviceWidth(width);\n    };\n\n    Dimensions.addEventListener('change', update);\n    return function () {\n      Dimensions.removeEventListener('change', update);\n    };\n  });\n  var content = React.createElement(View, {\n    style: {\n      width: deviceWidth,\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: allGeolocations,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(HistoryItem, {\n        navigation: navigation,\n        geolocation: item,\n        onOpen: openHistoryItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 41\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }));\n\n  if (allGeolocations.length === 0) {\n    content = React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"History not found\"));\n  }\n\n  var loading = useSelector(function (state) {\n    return state.geo.loading;\n  });\n\n  if (loading) {\n    return React.createElement(AppLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }\n  }, content);\n};\nvar styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 10\n  },\n  text: {\n    fontSize: 20\n  },\n  error: {\n    fontSize: 20,\n    color: THEME.DANGER_COLOR,\n    marginBottom: 10\n  }\n});\n\nHistoryScreen.navigationOptions = function (_ref3) {\n  var navigation = _ref3.navigation;\n  return {\n    headerTitle: 'History',\n    headerLeft: function headerLeft() {\n      return React.createElement(HeaderButtons, {\n        HeaderButtonComponent: AppHeaderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }\n      }, React.createElement(Item, {\n        onPress: function onPress() {\n          return navigation.toggleDrawer();\n        },\n        iconName: \"ios-menu\",\n        title: \"Toggle Drawer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["H:/BSUIR/Web/React Native/rn-self-posts/src/screens/HistoryScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","fetchGeolocation","HistoryItem","THEME","HeaderButtons","Item","AppHeaderIcon","AppLoader","HistoryScreen","navigation","openHistoryItem","geolocation","navigate","geoId","id","dispatch","allGeolocations","state","geo","Dimensions","get","width","PADDING_HORIZONTAL","deviceWidth","setDeviceWidth","update","addEventListener","removeEventListener","content","flex","item","length","styles","text","loading","center","StyleSheet","create","justifyContent","alignItems","margin","fontSize","error","color","DANGER_COLOR","marginBottom","navigationOptions","headerTitle","headerLeft","toggleDrawer"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {View, Text, StyleSheet, Dimensions, FlatList} from 'react-native'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {fetchGeolocation} from \"../store/geolocationAction\";\r\nimport {HistoryItem} from \"../components/HistoryItem\";\r\nimport {THEME} from \"../theme\";\r\nimport {HeaderButtons, Item} from \"react-navigation-header-buttons\";\r\nimport {AppHeaderIcon} from \"../components/AppHeadersIcon\";\r\nimport {AppLoader} from \"../components/ui/AppLoader\";\r\n\r\n\r\nexport const HistoryScreen = ({navigation}) => {\r\n\r\n    const openHistoryItem = geolocation => {\r\n        navigation.navigate('Item',\r\n            {\r\n                geoId: geolocation.id,\r\n                geolocation\r\n            })\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchGeolocation())\r\n    }, [])\r\n\r\n    const allGeolocations = useSelector(state => state.geo.geolocation)\r\n\r\n\r\n    const [deviceWidth, setDeviceWidth] = useState(\r\n        Dimensions.get('window').width - THEME.PADDING_HORIZONTAL * 2\r\n    )\r\n\r\n    useEffect(() => {\r\n        const update = () => {\r\n            const width = Dimensions.get('window').width - THEME.PADDING_HORIZONTAL * 2;\r\n            setDeviceWidth(width)\r\n        }\r\n        Dimensions.addEventListener('change', update)\r\n        return () => {\r\n            Dimensions.removeEventListener('change', update)\r\n        }\r\n    })\r\n\r\n    let content =\r\n        <View style={{width: deviceWidth, flex: 1}}>\r\n            <FlatList\r\n                data={allGeolocations}\r\n                renderItem={({item}) => <HistoryItem navigation={navigation} geolocation={item} onOpen={openHistoryItem}/>}\r\n                keyExtractor={item => item.id}/>\r\n        </View>\r\n\r\n    if (allGeolocations.length === 0) {\r\n        content = <View>\r\n            <Text style={styles.text}>History not found</Text>\r\n        </View>\r\n    }\r\n\r\n    const loading = useSelector(state => state.geo.loading)\r\n\r\n    if (loading) {\r\n        return <AppLoader/>\r\n    }\r\n\r\n\r\n    return <View style={styles.center}>\r\n        {content}\r\n    </View>\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    center: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        margin: 10\r\n    },\r\n    text: {\r\n        fontSize: 20\r\n    },\r\n    error: {\r\n        fontSize: 20,\r\n        color: THEME.DANGER_COLOR,\r\n        marginBottom: 10\r\n    }\r\n})\r\n\r\nHistoryScreen.navigationOptions = ({navigation}) => ({\r\n    headerTitle: 'History',\r\n    headerLeft: () => <HeaderButtons HeaderButtonComponent={AppHeaderIcon}>\r\n        <Item\r\n            onPress={() => navigation.toggleDrawer()}\r\n            iconName='ios-menu'\r\n            title='Toggle Drawer'/>\r\n    </HeaderButtons>\r\n\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}